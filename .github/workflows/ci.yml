name: CI Pipeline

on:
  push:
    branches:
      - main  # Adapted to use 'main' as the default branch
  pull_request:
    branches:
      - main

jobs:
  build-backend:
    name: Build and Test Spring Boot Backend
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Build Docker Image for Backend
      - name: Build Docker Image for Backend
        run: docker build --file backend/Dockerfile --tag backend-build:latest ./backend

      # Step 5: Run Maven Tests for Backend
      - name: Run All Backend Tests
        run: |
          docker run --rm backend-build:latest mvn test -Dsurefire.useFile=false -e -X

      # Step 6: Print Test Output (in case of failure)
      - name: Print Test Output on Failure
        if: failure()
        run: docker logs backend-build

      # Step 7: Build Production Docker Image for Backend (only if tests pass)
      - name: Build Production Docker Image for Backend
        if: success()
        run: docker build --file backend/Dockerfile --tag backend:latest ./backend

  build-frontend:
    name: Build and Test React Frontend
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Build Docker Image for Frontend
      - name: Build Docker Image for Frontend
        run: docker build --file frontend/Dockerfile --tag frontend-build:latest ./frontend

      # Step 5: Run Frontend Tests (Adapt this if you have frontend tests)
      - name: Run Frontend Tests
        run: docker run --rm frontend-build:latest npm run test -- --watchAll=false

      # Step 6: Build Production Docker Image for Frontend
      - name: Build Production Docker Image for Frontend
        if: success()
        run: docker build --file frontend/Dockerfile --tag frontend:latest ./frontend
