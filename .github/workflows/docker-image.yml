name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Backend Test and Build Job
  backend:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up JDK 22 for Maven
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '22'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build and run Maven tests
      - name: Build and run backend tests
        run: |
          cd backend
          ./mvnw clean install

      # Step 5: Build backend Docker image
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t mymovielist-backend .

  # Frontend Test and Build Job
  frontend:
    runs-on: ubuntu-latest
    needs: backend  # Ensure backend job finishes before this one

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js 18 for frontend
      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Cache npm dependencies
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies and run frontend tests
      - name: Install dependencies and run frontend tests
        run: |
          cd frontend
          npm install
          npm run test -- --watchAll=false

      # Step 5: Build frontend Docker image
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t mymovielist-frontend .

  # Integration Test Job (Runs Backend and Frontend Containers)
  integration_test:
    runs-on: ubuntu-latest
    needs: [backend, frontend]  # Ensure both backend and frontend jobs finish first

    services:
      # Define backend Docker service
      backend:
        image: mymovielist-backend
        ports:
          - 8080:8080
        options: --health-cmd "curl --fail http://localhost:8080/actuator/health || exit 1" --health-interval 10s --health-timeout 5s --health-retries 3

      # Define frontend Docker service
      frontend:
        image: mymovielist-frontend
        ports:
          - 3000:3000
        options: --health-cmd "curl --fail http://localhost:3000 || exit 1" --health-interval 10s --health-timeout 5s --health-retries 3

    steps:
      - name: Integration Tests
        run: |
          # Wait for services to be healthy before running tests
          sleep 30
          
          # Integration test (example, adjust according to your setup)
          curl -f http://localhost:8080/api/movies
          curl -f http://localhost:3000

